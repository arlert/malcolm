// Code generated by go-bindata.
// sources:
// mysql/1_20170510_00_init.sql
// DO NOT EDIT!

package ddl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mysql1_20170510_00_initSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x98\x4f\x6f\x9b\x30\x18\xc6\xef\x7c\x8a\xf7\x98\x6c\xcd\xd4\x74\xd2\x54\x29\xea\xc1\x85\x37\x2d\x5a\x30\x99\x31\xab\x7a\x02\x96\xb0\x0e\xa9\xa1\x28\xd0\x6e\xfd\xf6\x13\x60\x83\x49\x18\x61\xd5\xd8\x2a\x2d\x3d\x15\xfb\x79\xff\xe0\xe7\x87\xed\x76\x32\x81\xb7\x9b\xe8\x6e\x1b\x64\x21\xb8\x89\x36\x99\x80\xc3\x09\xe3\xc0\x19\xa1\x0e\xd1\xb9\x69\xd3\x99\xa6\xe9\x0c\x09\x47\xe0\xe4\x72\x81\xe0\x7b\x8f\x69\xb8\x4d\x7d\x18\x69\x00\x00\x7e\xb4\xf6\x21\x8a\xb3\xd1\x74\x3a\x86\xc7\x38\x8d\xee\xe2\x70\x0d\xd4\xe6\x40\xdd\xc5\x02\x88\xcb\x6d\xcf\xa4\x3a\x43\x0b\x29\x3f\x29\x43\xe2\x60\x13\xfa\xf0\x14\x6c\x57\xdf\x82\xed\xe8\xfd\xd9\xb8\xd2\x0b\x41\x5e\x21\x7b\x4e\xc2\xae\xcc\x06\xce\x89\xbb\xe0\x70\x2a\x62\xc2\x4d\x10\xdd\x2b\x59\x3f\xec\x65\x5d\x65\x51\x5e\x97\x9b\x16\x3a\x9c\x58\xcb\x91\x22\xa9\xd2\xe9\x2e\x63\x48\xb9\xa7\xaa\x64\x57\x2f\x8d\x07\x9b\x82\xbb\x34\xf2\x35\xec\x48\xbf\xee\x93\x5e\xbc\xed\x92\x99\x16\x61\xb7\xf0\x11\x6f\x61\x94\x5b\x20\x92\xb8\xd4\xfc\xe4\xa2\x18\x2e\x96\xf9\x44\x26\x1e\x6b\x63\x40\x7a\x65\x52\xbc\x30\xe3\xf8\xc1\xb8\xac\x5b\xbe\x26\xcc\x41\x7e\xf1\x98\x7d\x3d\xaf\xdd\xfe\x6c\xe2\x4d\xe9\x44\xea\x03\x71\xc0\xc1\x05\xea\x1c\xde\xc0\x9c\xd9\x16\x94\x10\xc0\xcd\x35\x32\x14\x0f\xef\x8a\x3a\x70\x01\xa7\xfb\xc8\x64\x61\xb0\x19\x16\x99\x75\x94\x26\xf7\xc1\xf3\x61\x5d\x98\xae\x92\x5a\x31\x3d\x3b\x3f\x72\xf2\x07\x38\x11\x06\xef\x73\x52\x4c\x48\x4e\x8a\x87\x2e\x4e\xd2\x24\x58\x85\xc3\x82\x72\x74\xf7\xf7\xdd\x95\xb6\xec\xdb\x5b\xce\x48\x7f\xcb\xa7\x2e\x83\x83\x24\x19\x78\x1f\x38\xfc\x7d\x17\x5d\x7a\x9d\xc5\xff\x73\x56\xaa\x15\xaa\xb9\x29\xd5\xb9\xac\x9a\xf5\xa2\xf5\x0f\x1f\x46\xb5\x5a\x88\x74\x9b\x3a\x9c\x11\x93\x72\xf0\x73\xbf\xbd\x2a\x60\x95\x66\x3e\xcc\x6d\x86\xe6\x15\x15\x25\xeb\x60\x60\x38\x47\x86\x54\x47\x47\xdd\x09\x8a\x5e\xf3\xf5\x30\x70\x81\x1c\x81\xa1\xc3\x99\xa9\x73\x75\x89\x88\xa3\x13\x03\x5f\x84\x76\x09\xe4\x3e\xd8\xf9\xb8\xc4\x3a\xff\xbd\x73\xd7\x0a\xb7\x4f\xd1\xd0\xfb\x56\x90\x24\x47\x66\x3b\x98\x15\xeb\xd3\x4a\x6c\x39\x27\x79\x15\xca\x16\x5a\xa5\x91\x9e\x08\x68\xe1\x55\x06\x37\x69\x15\xdb\xda\xc0\xac\xd6\x9c\xb5\x6c\xc4\x62\xae\xda\x8a\xc5\x73\x07\xb7\xc5\xad\x6d\xe7\x6a\x96\x8f\xf5\xc2\x2c\x0f\xeb\x25\xdc\x84\x9b\x2f\xfd\x6f\xf3\xd3\x36\xe7\x65\x53\x27\x75\x59\xd5\x5d\x31\x2d\xed\x95\x6a\x55\x22\xc2\xa4\x64\x27\x8b\x8a\x80\xb2\x28\x9e\x4c\xdc\x82\x41\x55\xa4\xc9\x81\xfc\xd3\xa8\x3f\x08\xdd\x1d\xc8\xbe\x5b\x3a\xa8\xde\xa1\xd9\x81\xb4\x73\x30\x14\x1b\xf0\xec\xdc\xd7\x7a\xd3\xd3\xfb\x08\xfe\x25\x08\x5d\x87\x8e\xda\xdb\x3f\x35\x51\xb4\xf0\x3a\xcf\x3f\x61\x64\x09\xda\x8e\x91\xbd\xbf\xee\x17\x1a\x29\xf3\x1f\x30\x52\xed\xed\xaf\x7c\x0b\x07\x5a\x78\x65\x46\x4e\x26\xa0\xdb\x96\x65\xf2\x99\xa6\xfe\x23\xc7\x78\xf8\x1e\x03\x80\x66\x30\x7b\x29\x5c\x56\xdf\x62\xa6\x4e\xa8\x9c\xb6\x4c\x14\x71\x33\x91\xaa\x38\x84\xe4\xb9\xd2\x10\x57\xa7\x4d\x43\x9a\x1f\x8a\x4d\x99\x32\x52\x26\xdb\xaf\xdb\xec\xa5\x50\x95\x4d\x34\x44\xea\x50\xa1\x29\xda\x6d\x6a\xc4\x90\xa6\x69\xa0\xed\xfc\xfc\x0c\x00\x00\xff\xff\x22\x10\xb2\xb4\xf7\x12\x00\x00")

func mysql1_20170510_00_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_mysql1_20170510_00_initSql,
		"mysql/1_20170510_00_init.sql",
	)
}

func mysql1_20170510_00_initSql() (*asset, error) {
	bytes, err := mysql1_20170510_00_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/1_20170510_00_init.sql", size: 4855, mode: os.FileMode(420), modTime: time.Unix(1498012143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mysql/1_20170510_00_init.sql": mysql1_20170510_00_initSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mysql": &bintree{nil, map[string]*bintree{
		"1_20170510_00_init.sql": &bintree{mysql1_20170510_00_initSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

